var get_wrongness = function() {
  //var wrongness = beta({a: 7.6984, b: 0.6422})
  //var wrongness = uniform({a:0, b:1})
  var wrongness = 1
  return wrongness
}

var get_alphas = function() {
  var alphas = {
    Aself: beta({a: 1, b: 1}),
    Asocial: beta({a: 1.513, b: 0.8474}),
    Atarget: beta({a: 1.3524, b: 1.0851}),
    Arep: 0
  }
  return alphas
}

var get_Ubase = function(action, wrongness, cost, conseq) {
  var get_Uself = function(action) {
    //console.log(cost)
    var table = {0: 0,
            1: cost,
            2: 0.5,
            3: 0.75}
    return table[action]  
  }
  
  var get_Usocial = function(action) {
    var harshness = -1*(wrongness + get_Utarget(action))
    var Usocial = (wrongness>0) ? 
        ((harshness > 0) ? -0.4*harshness : harshness) 
                   : wrongness//wrongness*action
    //console.log('uscoial', Usocial)
    return Usocial  
  }
  
  var get_Utarget = function(action) {
    var table = {0: 0,
            1: conseq,
            2: -.7,
            3: -.9}
    var val = table[action]
    
    return (val > 0) ? (-0.2*val) : (val)
  }
   
  var utilities = {
    Uself: get_Uself(action),
    Usocial: get_Usocial(action), 
    Utarget: get_Utarget(action)
  }
  //console.log(cost)
  return utilities
}
var get_Ucomm = function(action, obs) {
  var make_obs = obs.make_observation
  var o_posteriors = make_obs(action)
  
  var get_Urep = function() {
    var alphas = marginalize(o_posteriors, 'alphas')
    var dist = marginalize(alphas, 'Aself')
    return -1 * expectation(dist)
  }
  
  return {
    Urep: get_Urep()
  } 
}

var weightU = function(eU, alphas) {
  var Ubase = alphas['Aself']*eU['Uself'] + 
      alphas['Asocial']*eU['Usocial'] + 
      alphas['Atarget']*eU['Utarget'] 
  
  var Uextra = (eU['Urep']) ? alphas['Arep']*eU['Urep'] : 0
  
  var Utotal = Ubase + Uextra
  return Utotal
}

var make_punisher = function(beliefs, utils, obs) {
  var params = extend(utils.params, beliefs)
  var make_observer = utils.make_observer

  var avail_act = params.actions
  var beta = params.beta
  
  var obs = (obs) ? obs : {}
  
  var act = function() {
    var alphas = params.alphas
    return Infer({ method: 'enumerate', model() {
      var action = uniformDraw(avail_act)
      var eU = expectedU(action, params)
      //console.log(action, 'eU', eU)
      factor(beta * eU)
      return action
    }})
  }
  
  var expectedU = function(action, params) {
    var get_Ubase = utils.get_Ubase
    var get_Ucomm = utils.get_Ucomm
    var weightU = utils.weightU
    var alphas = params.alphas
    var wrongness = params.wrongness
    var cost = params.cost
    var conseq = params.conseq
    
    var U1 = get_Ubase(action, wrongness, cost, conseq)
    var U2 = (alphas.Arep === 0) ? {} : get_Ucomm(action, obs)
    var eU = extend(U1, U2)
        
    var totalU = weightU(eU, alphas)
    
    return totalU
  }
  
  return { act: act }
}

var make_observer = function(utils) {
  var get_wrongness = utils.get_wrongness
  var get_alphas = utils.get_alphas
  var make_punisher = utils.make_punisher
  var utils = utils
  
  var make_observation = dp.cache(function(action) {
    return Infer( { method: 'MCMC', samples: 100000, model() {
      var beliefs = {
        wrongness: get_wrongness(),
        alphas: get_alphas(),
      }
      
      var punisher = make_punisher(beliefs, utils)
      var act = punisher.act
      
      observe(act(), action)
      
      var posteriors = {
        wrongness: beliefs.wrongness,
        alphas: beliefs.alphas
      }
      return posteriors
    }})
  })

  return { make_observation: make_observation }
}

var utils = {
  // observer functions
  make_observer: make_observer,
  get_wrongness: get_wrongness,
  get_alphas: get_alphas,
  
  // punisher functions
  get_Ucomm: get_Ucomm,
  make_punisher: make_punisher,
  get_Ubase: get_Ubase,
  weightU: weightU
}
